- name: Install Evergreen
  become: true
  environment:
    PATH: "{{ansible_env.PATH}}:{{eg_install_path}}/bin"
  shell: >
    cd {{repo_base}}/Evergreen 
    && make STAFF_CLIENT_STAMP_ID={{eg_stamp_id}} install
- name: Create XUL Current Symlink
  become: true
  file:
    state: link
    src: "{{eg_install_path}}/var/web/xul/{{eg_stamp_id}}"
    dest: "{{eg_install_path}}/var/web/xul/current"
- name: Create XUL Server Symlink
  become: true
  file:
    state: link
    src: "{{eg_install_path}}/var/web/xul/current/server"
    dest: "{{eg_install_path}}/var/web/xul/server"
- name: Setup opensrf.xml config file
  become: true
  copy:
    remote_src: true
    src: "{{eg_install_path}}/conf/opensrf.xml.example"
    dest: "{{eg_install_path}}/conf/opensrf.xml"
    force: no
- name: Setup opensrf_core.xml config file
  become: true
  copy:
    remote_src: true
    src: "{{eg_install_path}}/conf/opensrf_core.xml.example"
    dest: "{{eg_install_path}}/conf/opensrf_core.xml"
    force: no
- name: Get URL for dojo
  get_url: url={{dojo_url}} dest=/tmp/dojo-release-{{dojo_version}}.tar.gz
- name: Unarchive dojo tarball
  unarchive:
    src: /tmp/dojo-release-{{dojo_version}}.tar.gz
    dest: /tmp/
- name: Copy dojo source files into place
  become: true
  # 'synchronize' is much faster than 'copy' for large directories
  # delegate_to tells synchronize source files live on the remote machine.
  delegate_to: "{{inventory_hostname}}"
  synchronize: 
    src: /tmp/dojo-release-{{dojo_version}}/
    dest: "{{eg_install_path}}/var/web/js/dojo/"
- name: Set ownership of {{eg_install_path}} to opensrf
  become: true
  file: dest={{eg_install_path}} owner=opensrf group=opensrf recurse=yes
- name: Setup .srfsh.xml for opensrf user
  become: true
  become_user: opensrf
  copy: 
    remote_src: true
    src: "{{eg_install_path}}/conf/srfsh.xml.example"
    dest: /home/opensrf/.srfsh.xml 
    force: no
- name: Copy ldconfig
  become: true
  copy:
    src: "{{playbook_dir}}/evergreen/evergreen.ld.conf"
    dest: /etc/ld.so.conf.d/evergreen.ld.conf
- name: Run ldconfig
  become: true
  shell: ldconfig
- block:
  when: using_redis | bool
  - name: Redis Ports
    replace:
      path: opensrf_core.xml.example
      regexp: '<port>5222</port>'
      replace: '<port>6379</port>'
  - name: Redis Passwords
    replace:
      path: opensrf_core.xml.example
      regexp: '<passwd>password</passwd>'
      replace: '<!--<passwd>password</passwd>-->'
  - name: Redis Passwords
    replace:
      # e.g. 456fc340-beba-4489-9070-0d6b49e9952b
      path: opensrf_core.xml.example
      regexp: '<passwd>([\w\-]{36})</passwd>'
      replace: '--><passwd>\1</passwd><!--'
  - name: Redis Passwords
    replace:
      path: opensrf_core.xml.example
      regexp: '<password>password</password>'
      replace: '<!--<password>password</password>-->'
  - name: Redis Passwords
    replace:
      path: opensrf_core.xml.example
      regexp: '<password>([\w\-]{36})</password>'
      replace: '--><password>\1</password><!--'
  - name: Redis Gateway Username
    replace:
      path: opensrf_core.xml.example
      regexp: '\s+ </services>\n\s*\n\s+<!-- Ejabberd -->\n\s*<username>opensrf</username>'
      replace: '\n    </services>\n    <username>gateway</username>\n'
